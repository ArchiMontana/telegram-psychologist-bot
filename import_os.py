import os
import sys
import telebot
import requests
from dotenv import load_dotenv
from telebot import types

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
HUGGINGFACE_API_KEY = os.getenv("HUGGINGFACE_API_KEY")

if not TELEGRAM_TOKEN or not HUGGINGFACE_API_KEY:
    print("‚ùå –û—à–∏–±–∫–∞: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env —É–∫–∞–∑–∞–Ω—ã TELEGRAM_TOKEN –∏ HUGGINGFACE_API_KEY")
    sys.exit(1)

bot = telebot.TeleBot(TELEGRAM_TOKEN)

MAX_TG_MESSAGE_LENGTH = 4096

def get_bot_reply(prompt):
    url = "https://api-inference.huggingface.co/models/google/flan-t5-large"
    headers = {
        "Authorization": f"Bearer {HUGGINGFACE_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "inputs": prompt,
        "parameters": {"max_new_tokens": 256}
    }
    try:
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        result = response.json()
        return result[0]["generated_text"] if isinstance(result, list) and "generated_text" in result[0] else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏."
    except Exception as e:
    print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç HuggingFace:", e)
    if response is not None:
        print("üîç –û—Ç–≤–µ—Ç HuggingFace:", response.text)
    return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

@bot.message_handler(func=lambda message: True)
def handle_all(message):
    bot.send_chat_action(message.chat.id, "typing")

    if message.text.lower() in ["/start", "–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "hello"]:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        btn1 = types.KeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
        btn2 = types.KeyboardButton("üìå –û –±–æ—Ç–µ")
        btn3 = types.KeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é")
        markup.add(btn1, btn2)
        markup.add(btn3)

        welcome = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
        bot.send_message(message.chat.id, welcome, reply_markup=markup)
    elif message.text.lower() in ["‚ùå –∑–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é"]:
        hide_markup = types.ReplyKeyboardRemove()
        bot.send_message(message.chat.id, "–ú–µ–Ω—é —Å–∫—Ä—ã—Ç–æ. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–æ–±—â–∞—Ç—å—Å—è!", reply_markup=hide_markup)
    elif message.text.lower() in ["üìå –æ –±–æ—Ç–µ"]:
        bot.send_message(message.chat.id, "ü§ñ –Ø ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–æ—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –æ–±—â–µ–Ω–∏—è. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!")
    else:
        reply = get_bot_reply(message.text)
        for i in range(0, len(reply), MAX_TG_MESSAGE_LENGTH):
            bot.send_message(message.chat.id, reply[i:i+MAX_TG_MESSAGE_LENGTH])

if __name__ == "__main__":
    print("ü§ñ –ü—Ä–æ—Å—Ç–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ì–æ—Ç–æ–≤ –∫ –¥–∏–∞–ª–æ–≥—É!")
    bot.polling()
